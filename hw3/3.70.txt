CS33 HW3
Feilan Wang
104796844

Q3.70

Question:

Consider the following union declaration:

union ele {
	struct {
		long *p;
		long y;
	} e1;
	struct {
		long x;
		union ele *next;
	} e2;
};

This declaration illustrates that structures can be embedded within unions.
The following procedure (with some expressions omitted) operates on a linked list having these unions as list elements:

void proc (union ele *up) {
	up->____ = *(____) - ____;
}

Answer:

A. What are the offsets (in bytes) of the following fields:

e1.p 	__0__
e1.y 	__8__
e2.x 	__0__
e2.next __8__

B. How many total bytes would the structure require?

16 bytes.

C. The compiler genreates the following assembly code for the body of proc:

void proc (union ele *up)
up in %rdi
proc:
	movq	8(%rdi),	%rax
	movq	(%rax),		%rdx
	movq	(%rdx),		%rdx
	subq	8(%rax),	%rdx
	movq	%rdx,		(%rdi)
	ret

On the basis of this information, fill in the missing expressions in the code for proc.
Hint: Some union references can have ambiguous interpretations. These ambiguities get resolved as you see where the references lead. There is only one answer that does not perform any casting and does not violate any type constraints. 

up->e2.x = *(up->e2.next->e1.p) - up->e2.next->e1.y;